import locale
import re
import sqlite3
import time
from datetime import date, datetime

import telebot
from telebot import types

import config
import func

api_token = '5956191624:AAHw268WZP_apCbj9aDUc6wAFE9uyEd4B0o'  # test bot @test239botbot
# api_token = '6173204610:AAEVmFTmk-b3-UdjlUqHFyyFvVbI6va6Ymg'  # production bot @mirexratebot
bot = telebot.TeleBot(api_token)
users = []

# Connect to the database
conn = sqlite3.connect('botusers.db')
c = conn.cursor()
# Create a table to store user information
c.execute(config.createuserstable)
conn.commit()
# Create a table to store Group information
c.execute(config.creategroupstable)
conn.commit()
conn.close()


def getmirkurs():
    conn = sqlite3.connect('ratesdb')
    c = conn.cursor()
    c.execute(config.getlastrate)
    records = c.fetchall()
    columns = [col[0] for col in c.description]
    rows = [dict(zip(columns, row)) for row in c.fetchall()]
    for row in records:
        ratedate = row[1]
        rate = row[3]
    c.close()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∫—É—Ä—Å–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    ratedate = datetime.strptime(ratedate, '%Y-%m-%d')
    ratedate = datetime.strftime(ratedate, '%d %B %Y')
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥
    curdate = str(date.today())
    curdate = datetime.strptime(curdate, '%Y-%m-%d')
    curdate = datetime.strftime(curdate, '%d %B %Y')
    result = '''–°–µ–≥–æ–¥–Ω—è {}
1 RUB = {} –¢–µ–Ω–≥–µ (–ö—É—Ä—Å –æ—Ç {})'''.format(curdate, rate, ratedate)
    result2 = '''–°–µ–≥–æ–¥–Ω—è {}'''.format(curdate)
    return result, result2


def getchatidsfromdb():
    conn = sqlite3.connect('botusers.db')
    c = conn.cursor()
    c.execute('SELECT chat_id FROM botusers')
    user_ids = [chat_id[0] for chat_id in c.fetchall()]
    c.execute('SELECT groupid FROM botgroups')
    group_ids = [chat_id[0] for chat_id in c.fetchall()]
    conn.close()

    return user_ids, group_ids


@bot.message_handler(commands=['start'])
def hellouser(message):
    currentuser = message.chat.id
    userinfo = message.from_user
    if not str(currentuser).startswith('-'):
        conn = sqlite3.connect('botusers.db')
        c = conn.cursor()
        c.execute(config.addusertodb.format(userinfo.id, userinfo.username))
        conn.commit()
        conn.close()
    currentuser = message.chat.id
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –∏ –ø—Ä–æ–µ–∫—Ç', callback_data='send_message')
    markup.add(button)
    if str(currentuser).startswith('-'):
        bot.send_message(chat_id=message.chat.id, text=config.starttext)
    else:
        bot.send_message(message.chat.id, text=config.starttext, reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data == 'send_message')
def callback_handler(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(chat_id=callback_query.message.chat.id, text=config.supporttext)


@bot.message_handler(commands=['kursmir'])
def mirexrate(message):
    user = message.chat.id  # –¢–µ–∫—É—â–∏–π ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = getmirkurs()
    a, b = result
    user_ids, group_ids = getchatidsfromdb()
    if str(user).startswith('-'):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —á–∞—Ç/–≥—Ä—É–ø–ø–∞
        if user in group_ids:  # –∏ -ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            try:
                bot.send_message(message.chat.id, text=a)
            except telebot.apihelper.ApiTelegramException as e:
                func.catcherrors(e, user)
        else:
            try:
                bot.send_message(message.chat.id, text=config.noaccesstext.format(user))
            except telebot.apihelper.ApiTelegramException as e:
                func.catcherrors(e, user)
    else:
        try:
            bot.send_message(message.chat.id, text=a)  # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —á–µ–ª–æ–≤–µ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            userinfo = message.from_user
            conn = sqlite3.connect('botusers.db')
            c = conn.cursor()
            c.execute(config.addusertodb.format(userinfo.id, userinfo.username))
            conn.commit()
            conn.close()
        except telebot.apihelper.ApiTelegramException as e:
            func.catcherrors(e, user)
    return user


@bot.message_handler(func=lambda message: message.text and "/admin" not in message.text)
def handle_message(message):
    user = message.chat.id
    if not str(user).startswith('-'):   # –û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –õ–°
        if not message.chat.id == adminuser:
            bot.reply_to(message, '''–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        /kursmir - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å''')
        else:
            bot.reply_to(message, '''–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        /kursmir - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å
        /admin - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞''')
    else:
        print('It is group')


adminuser = 326070831


@bot.message_handler(commands=['admin'])
def admintools(message):
    if message.chat.id == adminuser:
        markup = types.InlineKeyboardMarkup()
        grouplistbtn = types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', callback_data='grouplist')
        statsbtn = types.InlineKeyboardButton(text='üë• –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='showstats')
        addgroupbtn = types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='addgroup')
        removegroupbtn = types.InlineKeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='removegroup')
        markup.add(grouplistbtn)
        markup.add(addgroupbtn)
        markup.add(removegroupbtn)
        markup.add(statsbtn)
        bot.send_message(chat_id=adminuser, text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞', reply_markup=markup)


# –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ —Ä–∏—Å—É–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ - –î–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda c: c.data == 'grouplist')
def callback_handler(callback_query):
    addgroupbtn = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='addgroup')
    removegroupbtn = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='removegroup')
    markup = types.InlineKeyboardMarkup()
    markup.add(addgroupbtn)
    markup.add(removegroupbtn)
    bot.answer_callback_query(callback_query.id)
    conn = sqlite3.connect('botusers.db')
    c = conn.cursor()
    c.execute('SELECT * FROM botgroups')
    rows = c.fetchall()
    c.close()
    grouplist = ''
    gloopcount = 0
    for row in rows:
        pkid, gid, gname, glink = row
        gloopcount += 1
        grouplist += f"{gloopcount, gid, gname, glink}\n"
        time.sleep(0.05)
        patn = re.sub(r"[\([{})\]]", "", grouplist)
    bot.send_message(chat_id=callback_query.message.chat.id, text=patn, reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data == 'showstats')
def callback_handler(callback_query):
    conn = sqlite3.connect('botusers.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM botusers")
    userscount = c.fetchone()[0]
    time.sleep(0.25)
    c.execute("SELECT COUNT(*) FROM botgroups")
    groupscount = c.fetchone()[0]
    bot.send_message(chat_id=adminuser, text='''
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë±‚Äç –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}
üë• –ö–æ–ª-–≤–æ –≥—Ä—É–ø–ø: {}'''.format(userscount, groupscount))
    conn.commit()
    c.close()


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda c: c.data == 'addgroup')
def callback_handler(callback_query):
    addgroup = bot.send_message(chat_id=callback_query.message.chat.id, text='''–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ù–û–í–£–Æ –≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤—å 
    –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Å–∫–µ: -ID, –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã , @–≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∞''')
    bot.register_next_step_handler(addgroup, groupadd)


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda c: c.data == 'removegroup')
def callback_handler(callback_query):
    removegroup = bot.send_message(chat_id=callback_query.message.chat.id, text='–ß—Ç–æ–±—ã –£–î–ê–õ–ò–¢–¨ –≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤—å ID '
                                                                                '–≥—Ä—É–ø–ø—ã')
    bot.register_next_step_handler(removegroup, groupremove)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
def groupadd(message):
    data = message.text
    try:
        newgid, newgname, newglink = data.split(',')
        conn = sqlite3.connect('botusers.db')
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM botgroups")
        gcountold = c.fetchone()[0]
        time.sleep(0.25)
        c.execute((config.addgroup.format(newgid, newgname, newglink)))
        time.sleep(0.25)
        c.execute("SELECT COUNT(*) FROM botgroups")
        gcountcur = c.fetchone()[0]
        conn.commit()
        c.close()
        if gcountold != gcountcur:
            bot.send_message(chat_id=adminuser,
                             text='–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ {} —Å ID {} –∏ —Å—Å—ã–ª–∫–æ–π {}'.format(newgname, newgid, newglink))
        else:
            bot.send_message(chat_id=adminuser, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    except ValueError:
        print('Not enough values to unpack')
        bot.send_message(chat_id=adminuser, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3')


def groupremove(message):
    data = message.text
    conn = sqlite3.connect('botusers.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM botgroups")
    time.sleep(0.25)
    gcountold = c.fetchone()[0]
    c.execute(config.removegroup.format(data))
    conn.commit()
    c.execute("SELECT COUNT(*) FROM botgroups")
    gcountcur = c.fetchone()[0]
    if gcountold > gcountcur:
        bot.send_message(chat_id=adminuser, text='–ì—Ä—É–ø–ø–∞ —Å ID {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'.format(data))
    else:
        bot.send_message(chat_id=adminuser, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    c.close()


conn = sqlite3.connect('ratesdb')
c = conn.cursor()
c.execute(config.getlastrate)
records = c.fetchall()
columns = [col[0] for col in c.description]
rows = [dict(zip(columns, row)) for row in c.fetchall()]
for row in records:
    ratedate = row[1]
    rate = row[3]
c.execute("SELECT COUNT(*) FROM exrates")
current_record_count = c.fetchone()[0]
print(current_record_count)
c.close()


def write_to_file(filename, data):
    with open(filename, "w") as f:
        f.write(str(data))


def read_from_file(filename):
    with open(filename, "r") as f:
        return float(f.read())


def main():
    previous_record_count = read_from_file("linecount.txt")
    previous_rate = read_from_file("exrate.txt")
    if current_record_count > previous_record_count:
        print("New database entry added")
        c, d = getmirkurs()
        user_ids, group_ids = getchatidsfromdb()
        rate_prefix = "üü¢‚¨ÜÔ∏è " if rate > previous_rate else "üî¥‚¨áÔ∏è "
        message = f"–ù–æ–≤—ã–π –æ–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å –ú–ò–†!\n{d}\n{rate_prefix}{rate} —Ç–µ–Ω–≥–µ –∑–∞ 1 —Ä—É–±"
        for chat in group_ids + user_ids:
            try:
                bot.send_message(chat_id=chat, text=message)
            except telebot.apihelper.ApiTelegramException as e:
                func.catcherrors(e, chat)
            time.sleep(2)
        write_to_file("linecount.txt", current_record_count)
        write_to_file("exrate.txt", rate)


if __name__ == "__main__":
    main()

bot.polling(none_stop=True)
